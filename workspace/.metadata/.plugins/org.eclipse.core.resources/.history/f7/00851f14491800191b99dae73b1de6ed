
package services;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.encoding.Md5PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.util.Assert;

import repositories.RefereeRepository;
import security.Authority;
import security.LoginService;
import security.UserAccount;
import domain.Box;
import domain.Complaint;
import domain.Referee;
import domain.Report;
import domain.SocialProfile;

@Service
@Transactional
public class RefereeService {

	//Repository
	@Autowired
	public RefereeRepository	refereeRepository;


	//Services

	//Constructor
	public RefereeService() {
		super();
	}

	//Simple CRUD
	//38.1
	public Referee create() {

		//Logged user must be an administrator
		final Authority a = new Authority();
		final UserAccount user = LoginService.getPrincipal();
		a.setAuthority(Authority.ADMIN);
		Assert.isTrue(user.getAuthorities().contains(a));

		final Referee res;
		res = new Referee();
		//		final Box trash = new Box();
		//		final Box out = new Box();
		//		final Box spam = new Box();
		//		final Box in = new Box();
		final List<Box> predefined = new ArrayList<Box>();
		//		predefined.add(in);
		//		predefined.add(out);
		//		predefined.add(spam);
		//		predefined.add(trash);
		res.setBoxes(new ArrayList<Box>(predefined));

		res.setSocialProfiles(new ArrayList<SocialProfile>());
		res.setName("");
		res.setEmail("");
		res.setAddress("");
		res.setSurname("");
		res.setPhoneNumber("");
		res.setPhotoURL("");
		final UserAccount newUser = new UserAccount();
		final Authority ad = new Authority();
		ad.setAuthority(Authority.REFEREE);
		newUser.addAuthority(ad);
		res.setUserAccount(newUser);

		return res;
	}

	Referee saveComplaint(final Referee referee, final Complaint complaint) {
		//Logged user must be an referee
		final Authority a = new Authority();
		final UserAccount user = LoginService.getPrincipal();
		a.setAuthority(Authority.REFEREE);
		Assert.isTrue(user.getAuthorities().contains(a));
		final Collection<Complaint> c = referee.getComplaints();

		c.add(complaint);

		referee.setComplaints(c);

		return this.refereeRepository.save(referee);

	}

	//Returns logged customer
	public Referee findByPrincipal() {
		Referee res;
		UserAccount userAccount;

		userAccount = LoginService.getPrincipal();
		Assert.notNull(userAccount);
		res = this.findByUserAccount(userAccount);
		Assert.notNull(res);

		return res;
	}

	//Returns logged customer from his or her userAccount
	public Referee findByUserAccount(final UserAccount userAccount) {
		Referee res;
		Assert.notNull(userAccount);

		res = this.refereeRepository.findByUserAccountId(userAccount.getId());

		return res;
	}
	public Referee findByReport(final Report report) {
		Referee res;
		Assert.notNull(report);

		res = this.refereeRepository.findByReportId(report.getId());
		return res;
	}

	public Collection<Referee> findAll() {
		return this.refereeRepository.findAll();
	}

	public Referee save(final Referee ref) {
		// Restrictions
		Assert.isTrue(ref.getBan() != true);

		if (ref.getId() == 0) {
			final Md5PasswordEncoder encoder = new Md5PasswordEncoder();
			final String oldpass = ref.getUserAccount().getPassword();
			final String hash = encoder.encodePassword(oldpass, null);

			final Collection<Box> boxes = new ArrayList<>();
			final Box trash = new Box();
			final Box out = new Box();
			final Box spam = new Box();
			final Box in = new Box();
			trash.setName("trash");
			in.setName("in");
			out.setName("out");
			spam.setName("spam");
			out.setPredefined(true);
			in.setPredefined(true);
			spam.setPredefined(true);
			trash.setPredefined(true);
			final Box box1 = this.boxService.save(trash);
			final Box box2 = this.boxService.save(in);
			final Box box3 = this.boxService.save(out);
			final Box box4 = this.boxService.save(spam);

			boxes.add(box1);
			boxes.add(box2);
			boxes.add(box3);
			boxes.add(box4);
			hw.setBoxes(boxes);

			final UserAccount cuenta = ref.getUserAccount();
			cuenta.setPassword(hash);
			ref.setUserAccount(cuenta);
		}

		return this.refereeRepository.save(ref);
	}
}
